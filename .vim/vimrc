" --------------------------------------------------------------------
" Vundle
" --------------------------------------------------------------------
" (install with: git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim ; then run :PluginInstall)
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-commentary'
"Plugin 'tpope/vim-classpath'
Plugin 'scrooloose/nerdtree'
Plugin 'mbbill/undotree'
Plugin 'vim-airline/vim-airline'
Plugin 'dancardy/vim-airline-themes'
Plugin 'qpkorr/vim-bufkill'

call vundle#end()            " required
filetype plugin indent on    " required

" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

" --------------------------------------------------------------------
" KEY REMAPPINGS AND CUSTOM COMMANDS
" --------------------------------------------------------------------

" jk instead of Esc to exit insert and command mode
inoremap jk <Esc>
cnoremap jk <Esc>

" j and k move up/down along visual lines instead of
" along file lines (different when text wraps)
nnoremap j gj
nnoremap k gk

" \b to quickly change buffers
nnoremap <leader>b :ls<cr>:buffer<space>

" \ln will toggle numbering from relative
nnoremap <silent> <leader>ln :set relativenumber!<CR>

" Press <leader> (\) Enter to remove search highlights
nnoremap <silent> <leader><cr> :noh<cr>

" \ws Toggle display of whitespace
nnoremap <silent> <leader>ws :set list!<cr>

" \tws strip Trailing Whitespace
nnoremap <leader>tws :call Preserve("%s/\\s\\+$//e")<cr>
vnoremap <leader>tws :call Preserve("%s/\\%V\\s\\+$//e")<cr>

" diff current buffer and the file it was loaded from
" Revert with: ":delcommand DiffOrig".
if !exists(":DiffOrig")
    command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
                \ | wincmd p | diffthis
endif

"Delete Buffer without losing its window (commands from vim-bufkill)
":BD (delete buffer), :BB, :BF (forward and back by access order)

" Unnamed register is system clipboard (so don't need "+p)
set clipboard=unnamed

" Faster search and replace (just type old/new patterns)
nnoremap <leader>s :%s//gc<Left><Left><Left>
vnoremap <leader>s :s/\%V/gc<Left><Left><Left>

" Make Y behave consistently with D (instead of synonym for yy)
nnoremap Y y$

nnoremap <leader>n :NERDTreeToggle<cr>
nnoremap <leader>t :TagbarToggle<cr>
nnoremap <leader>u :UndotreeToggle<cr>

" Line up visually selected instances of '=' or '//'
vnoremap <leader>= :call AlignOnString("=")<cr>
vnoremap <leader>// :call AlignOnString("//")<cr>
let s:path_of_vimrc = fnamemodify(resolve(expand('<sfile>:p')), ':h')
let $INCLUDEDSCRIPT =  s:path_of_vimrc . '/alignonstring.vim'
source $INCLUDEDSCRIPT

if !exists(":SetScriptToRun")
    command SetScriptToRun let $SCRIPTTORUN = resolve(expand('%:p'))
endif
" shortcut to run the script that was identified by running the command above
noremap <leader>q :source $SCRIPTTORUN<cr>

" Opens a new tab with the current buffer's path
"noremap <leader>te :tabedit <c-r>=expand("%:p:h")<cr>/

" Switch CWD to the directory of the open buffer
"noremap <leader>cd :cd %:p:h<cr>:pwd<cr>

set rtp+=/user/local/opt/fzf


" --------------------------------------------------------------------
" FORMATTING & DISPLAY
" --------------------------------------------------------------------

set tabstop=4
set shiftwidth=4
set softtabstop=4 " sets behavior of backspace when set expandtab
set smarttab   " tab in front of a line shifts by shiftwidth
set expandtab  " spaces, not tabs
set autoindent " copy indent from current ine when starting a new line

set encoding=utf-8

set listchars=tab:¦\ ,trail:·,extends:»,precedes:«
"set listchars=tab:▸\ ,trail:·,extends:»,precedes:«
set list " show whitespace characters
set linebreak " words won't be split across lines when wrap is on.

set number " show line numbers
set laststatus=2 " always show a status line
set ruler " shows line number in lower right
set showcmd " display incomplete commands
set wildmenu " visual autocomplete for command menu
"set wildmode=longest,list " bash behavior for autocomplete
set wildignore=*.o,*~
if has("win32")
    set wildignore+=.git\*,.hg\*,.svn\*
else
    set wildignore+=*/.git/*,*/.hg/*,*/.svn/*
endif

set showmatch " highlight matching
set display+=lastline

set statusline=%F%m%r%h%w\ (%{&ff}/%Y)%=\ \ %c\|\ %l\/%L

" Switch syntax highlighting on when the terminal has colors or when using GUI
if &t_Co > 2 || has("gui_running")
    if has('syntax') && !exists("g:syntax_on")
        syntax enable
    endif
endif

try
    colorscheme danscolors
catch
endtry

set termguicolors " don't use limited color set in terminals

"set guioptions-=m " remove menu bar
"set guioptions-=T " remove toolbar

" --------------------------------------------------------------------
" SEARCHING AND COMMAND ENTRY
" --------------------------------------------------------------------

" The matchit plugin makes the % command work better
if has('syntax') && has('eval')
    if v:version >= 800
        packadd matchit
    else
        runtime macros/matchit.vim
    endif
endif

" search brings search result to 'scrolloff' from the edge of the screen
if !&scrolloff
    set scrolloff=3
endif
if !&sidescrolloff
    set sidescrolloff=5
endif

set hlsearch " highlights search terms
set incsearch " highlight while search
set ignorecase
set smartcase " overrides ignorecase if pattern contains uppercase

"set complete-=i " <C-p> won't look in all included files for suggestions


" --------------------------------------------------------------------
" VIM BEHAVIOR
" --------------------------------------------------------------------

if !has('nvim') && &ttimeoutlen == -1
    set ttimeout
    set timeoutlen=1200 " more time for macros
    set ttimeoutlen=100
endif

" Do not recognize octal numbers for Ctrl-A and Ctrl-X
set nrformats-=octal

set backspace=indent,eol,start " backspace operates normally
set hidden

if has('mouse')
    set mouse=a
endif

if &history < 1000
    set history=1000
endif

if &tabpagemax < 50
    set tabpagemax=50
endif

set autoread " reload files when other programs change them

" no dings on extra escapes or other errors
if exists("&belloff")
    set belloff=all
else
    set noerrorbells
    set visualbell
    set t_vb=
endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")
    " Enable file type detection.
    filetype plugin indent on

    " Put these in an autocmd group, so that you can revert them with:
    " ':augroup vimStartup | au! | augroup END'
    augroup vimStartup
        au!
        " When editing a file, always jump to the last known cursor position
        autocmd BufReadPost *
                    \ if line("'\"") >= 1 && line("'\"") <= line("$") |
                    \   exe "normal! g`\"" |
                    \ endif
    augroup END

    " yaml doesn't work with tabs
    autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab

    " note: this must be last because it undoes a small part of ftplugin
    " +j deletes comment character when joining commented lines
    " +c auto-wraps comments while they are being typed
    " -r stops comment leader from being inserted on enter
    " -o stops comment leader from being inserted on o
    autocmd FileType * setlocal formatoptions+=j formatoptions+=c
                \ formatoptions-=r formatoptions-=o

    " Treat .y files as yacc
    autocmd BufNewFile,BufRead *.y setfiletype yacc

    " Open NERDtree on launch unless a file was specified
    "autocmd StdinReadPre * let s:std_in=1
    "autocmd VimEnter *
    "   \ if !exists("s:std_in") && argc() == 0 |
    "       \ NERDTree |
    "   \ elseif !exists("s:std_in") && argc() == 1 && isdirectory(argv()[0])
    "       \ | exe 'NERDTree' argv()[0] | wincmd p | ene |
    "   \ endif

    " Close NERDTree if it's the only remaining buffer
    autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") &&
        \ b:NERDTree.isTabTree()) | q | endif
endif " has("autocmd")

" execute command without changing last search or cursor position
function! Preserve(command)
    let _s=@/
    let l = line(".")
    let c = col(".")
    execute a:command
    let @/=_s
    call cursor(l, c)
endfunction


let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'
let g:NERDTreeNaturalSort=1 " sorts numbers naturally
let g:NERDTreeChDirMode=2 " cwd is changed with root of NERDTree
let g:NERDTreeIgnore=['^NTUSER.DAT', '\~$']
let g:NERDTreeRespectWildIgnore=1
let g:NERDTreeMouseMode=2
let g:NERDTreeShowBookmarks=1
let g:NERDTreeMinimalUI=1
let g:NERDTreeQuitOnOpen=1

set noshowmode
let g:airline_theme='dansairlinecolors'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_buffers = 1
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline#extensions#tabline#show_tab_nr = 0
let g:airline#extensions#tabline#show_close_button = 1
let g:airline#extensions#tabline#show_tab_type = 1
" Formatter options: default, jsformatter, unique_tail, unique_tail_improved
let g:airline#extensions#tabline#formatter = 'unique_tail'

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
" redefined due to windows bug that doesn't display symbol consistently
"let g:airline_symbols.readonly = "[RO]"

" Recommended by Undotree:
"if has("persistent_undo")
"   set undodir=~/.undodir/
"   set undofile
"endif

